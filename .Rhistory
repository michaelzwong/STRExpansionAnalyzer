DF$variable.percent <- with(DF, ave(motif, FUN=getVariablePercentage))
DF$variable.percent <- with(DF, ave(count(variable), motif, FUN=getVariablePercentage))
DF$variable.percent <- with(DF, ave(count(variable==1), motif, FUN=getVariablePercentage))
?with
DF$variable.percent <- with(DF, ave(variable, motif, FUN=sum)
DF$variable.percent <- with(DF, ave(variable, motif, FUN=sum))
DF$variable.percent <- with(DF, ave(variable, motif, FUN=sum))
head(DF)
DF[DF$motif=="AAT"]
sum(DF$motif=="AAT")
sum(DF$motif=="AAT" & DF$variable ==0)
DF$variable.total <- with(DF, ave(variable, motif, FUN=sum))
DF$motif.totalcount <- with(DF, sum(motif))
DF$motif.totalcount <- with(DF, ave(motif, FUN=count))
DF$motif.totalcount <- with(DF, sum(motif))
DF$motif.totalcount <- as.numeric(ave(DF$motif, DF$motif, FUN=length))
head(DF)
DF$variable.percent <- as.numeric(DF$variable.total/DF$motif.totalcount)
head(DF)
tail(names(sort(table(unlist(DF$variable.percent)))), 10)
tail(sort(DF$variable.percent, decreasing=TRUE), 10)
head(sort(DF$variable.percent, decreasing=TRUE), 10)
tail(names(sort(table(unlist(DF$motif)))), 10)
head(sort(DF$motif, decreasing=TRUE), 10)
head(sort(DF$motif, increasing=TRUE), 10)
tail(sort(DF$motif, decreasing=TRUE), 10)
head(order(DF$motif, DF$variable.percent), 10)
DF[(order(DF$motif, DF$variable.percent),]
DF[(order(DF$motif, DF$variable.percent)),]
head(unique(DF$motif[order(DFvariable.percent, decreasing=TRUE)]), 10)
head(unique(DF$motif[order(DF$variable.percent, decreasing=TRUE)]), 10)
ggplot(filteredDF, aes(x=motif, fill=factor(variable))) +
geom_bar(position="stack") +
labs(title = "Temperatures\n", x = "TY [°C]", y = "Txxx", fill = "Legend Title\n")
topNMostVariableMotifs <-
head(unique(DF$motif[order(DF$variable.percent, decreasing=TRUE)]), num)
# Build filter condition
condition <- FALSE
for(motif in topNMostVariableMotifs) {
condition <- condition | DF$motif==motif
}
# Apply filters
filteredDF <- DF[condition,]
ggplot(filteredDF, aes(x=motif, fill=factor(variable))) +
geom_bar(position="stack") +
labs(title = "Temperatures\n", x = "TY [°C]", y = "Txxx", fill = "Legend Title\n")
ggplot(filteredDF, aes(x=motif, y=variable.percent) +
geom_bar() +
labs(title = "Temperatures\n", x = "TY [°C]", y = "Txxx", fill = "Legend Title\n")
ggplot(filteredDF, aes(x=motif, y=variable.percent)) +
geom_bar() +
labs(title = "Temperatures\n", x = "TY [°C]", y = "Txxx", fill = "Legend Title\n")
ggplot(filteredDF, aes(x=motif)) +
geom_bar() +
labs(title = "Temperatures\n", x = "TY [°C]", y = "Txxx", fill = "Legend Title\n")
head(filteredDF)
topNMostVariableMotifs <-
head(unique(DF$motif[order(DF$variable.percent, decreasing=TRUE)]), num)
condition <- FALSE
for(motif in topNMostVariableMotifs) {
condition <- condition | DF$motif==motif
}
topNMostVariableMotifs <-
head(unique(DF$motif[order(DF$variable.percent, decreasing=TRUE)]), 5)
# Build filter condition
condition <- FALSE
for(motif in topNMostVariableMotifs) {
condition <- condition | DF$motif==motif
}
head(filteredDF)
DF <- data.frame(do.call(rbind, strsplit(str_loci, "[:-]")))
names(DF) <- c("chr", "start", "end", "motif")
DF$start <- as.numeric(as.character(DF$start))
DF$end <- as.numeric(as.character(DF$end))
DF$size <- with(DF, end-start)
DF$size.mean <- with(DF, ave(size, motif, FUN=mean))
DF$size.sd <- with(DF, ave(size, motif, FUN=sd))
DF$size.zscore <- with(DF, ave(size, motif, FUN=getZScore))
DF$motif.totalcount <- as.numeric(ave(DF$motif, DF$motif, FUN=length))
DF$variable <- with(DF, ave(size.zscore, FUN=isVariable))
DF$variable.total <- with(DF, ave(variable, motif.totalcount, FUN=getVariablePercentage))
DF$variable.percent <- as.numeric(DF$variable.total/DF$motif.totalcount)
topNMostVariableMotifs <-
head(unique(DF$motif[order(DF$variable.percent, decreasing=TRUE)]), 5)
# Build filter condition
condition <- FALSE
for(motif in topNMostVariableMotifs) {
condition <- condition | DF$motif==motif
}
head(filteredDF)
head(unique(DF$motif[order(DF$variable.percent, decreasing=TRUE)]), 5)
condition <- FALSE
for(motif in topNMostVariableMotifs) {
condition <- condition | DF$motif==motif
}
filteredDF <- DF[condition,]
head(filteredDF)
topNMostVariableMotifs <-
head(unique(DF$motif[order(DF$variable.percent, increasing=TRUE)]), 5)
topNMostVariableMotifs <-
head(unique(DF$motif[order(DF$variable.percent, decreasing=FALSE)]), 5)
condition <- FALSE
for(motif in topNMostVariableMotifs) {
condition <- condition | DF$motif==motif
}
# Apply filters
filteredDF <- DF[condition,]
head(filteredDF)
DF <- data.frame(do.call(rbind, strsplit(str_loci, "[:-]")))
names(DF) <- c("chr", "start", "end", "motif")
DF$start <- as.numeric(as.character(DF$start))
DF$end <- as.numeric(as.character(DF$end))
DF$size <- with(DF, end-start)
DF$size.mean <- with(DF, ave(size, motif, FUN=mean))
DF$size.sd <- with(DF, ave(size, motif, FUN=sd))
DF$size.zscore <- with(DF, ave(size, motif, FUN=getZScore))
DF$motif.totalcount <- as.numeric(ave(DF$motif, DF$motif, FUN=length))
DF$variable <- with(DF, ave(size.zscore, FUN=isVariable))
DF$variable.total <- with(DF, ave(variable, motif.totalcount, FUN=getVariablePercentage))
DF$variable.percent <- as.numeric(DF$variable.total/DF$motif.totalcount)
# remove incomplete cases
DF <- DF[complete.cases(DF),]
head(DF)
DF$variable.total <- with(DF, ave(variable, motif, FUN=sum))
head(DF)
DF$variable.percent <- as.numeric(DF$variable.total/DF$motif.totalcount)
head(DF)
topNMostVariableMotifs <-
head(unique(DF$motif[order(DF$variable.percent, decreasing=FALSE)]), 5)
topNMostVariableMotifs
condition <- FALSE
for(motif in topNMostVariableMotifs) {
condition <- condition | DF$motif==motif
}
filteredDF <- DF[condition,]
ggplot(filteredDF[], aes(x=motif)) +
geom_bar() +
labs(title = "Temperatures\n", x = "TY [°C]", y = "Txxx", fill = "Legend Title\n")
ggplot(filteredDF[], aes(x=motif)) +
geom_bar()
head(filteredDF)
topNMostVariableMotifs <-
head(unique(DF$motif[order(DF$variable.percent, decreasing=TRUE)]), 5)
# Build filter condition
condition <- FALSE
for(motif in topNMostVariableMotifs) {
condition <- condition | DF$motif==motif
}
# Apply filters
filteredDF <- DF[condition,]
head(filteredDF)
ggplot(filteredDF[], aes(x=motif)) +
geom_bar()
# Apply filters
filteredDF <- DF[condition,]
ggplot(filteredDF[], aes(x=motif, fill=motif)) +
geom_bar()
ggplot(filteredDF[], aes(x=motif, fill=motif)) +
stat_bin(binwidth=1, geom="text", aes(label=..count..), vjust=-1.5)
geom_bar()
ggplot(filteredDF[], aes(x=motif, fill=motif)) +
stat_bin(binwidth=1, geom="text", aes(label=motif.percent), vjust=-1.5)
geom_bar()
ggplot(filteredDF[], aes(x=motif, fill=motif)) +
geom_bar() +
gemo_text(aes(label=variable.percent))
ggplot(filteredDF[], aes(x=motif, fill=motif)) +
geom_bar() +
geom_text(aes(label=variable.percent))
ggplot(filteredDF[], aes(x=motif, fill=motif)) +
geom_bar() +
geom_text(aes(y=variable.percent))
ggplot(filteredDF[], aes(x=motif, fill=motif,  label=variable.percent)) +
geom_bar()
ggplot(filteredDF, aes(x=motif, fill=motif,  label=variable.percent)) +
geom_bar()
ggplot(filteredDF, aes(x=motif, fill=motif,  label=variable.percent)) +
geom_bar() +   geom_text(nudge_y = 1)
ggplot(filteredDF, aes(x=motif, fill=motif, label=variable.percent)) +
geom_bar()
topNMostVariableMotifs <-
head(unique(DF$motif[order(DF$variable.percent, increasing=TRUE)]), 5)
# Build filter condition
condition <- FALSE
for(motif in topNMostVariableMotifs) {
condition <- condition | DF$motif==motif
}
head(filteredDF)
# Apply filters
filteredDF <- DF[condition,]
ggplot(filteredDF, aes(x=motif, fill=motif, label=variable.percent)) +
geom_bar()
head(filteredDF)
topNMostVariableMotifs <-
head(unique(DF$motif[order(DF$variable.percent, increasing=TRUE)]), 5)
topNMostVariableMotifs <-
head(unique(DF$motif[order(DF$variable.percent, decreasing=TRUE)]), 5)
topNMostVariableMotifs <-
tail(unique(DF$motif[order(DF$variable.percent, decreasing=TRUE)]), 5)
# Build filter condition
condition <- FALSE
for(motif in topNMostVariableMotifs) {
condition <- condition | DF$motif==motif
}
head(filteredDF)
# Apply filters
filteredDF <- DF[condition,]
head(filteredDF)
ggplot(filteredDF, aes(x=motif, fill=motif, label=variable.percent)) +
geom_bar()
citation(readr)
?readr
cite(readr)
citation
citation()
library(classifySTR.R)
source("classifySTR.R")
source("R/classifySTR.R")
source("classifySTR.R")
source("../classifySTR.R")
path
wd
wd()
getwd()
source("R/classifySTR.R")
source("R/classifySTR.R")
source("R/classifySTR.R")
df <- readIntoDF("R/asd_data")
df <- readIntoDF("asd_data")
df <- readIntoDF("asd_data.txt")
head(df)
source("R/classifySTR.R")
citation("readr")
df <- readIntoDF("asd_data.txt")
df <- createVariables(df, 0.1)
head(df)
plotMotifsDistribution(df, c("AAT, AG"), count=TRUE)
source("R/plot.R")
plotMotifsDistribution(df, c("AAT, AG"), count=TRUE)
source('~/workspace/STRExpansionAnalyzer/R/test.R')
source("R/plot.R")
plotMotifsDistribution(df, c("AAT, AG"), count=TRUE)
df <- readIntoDF("asd_data.txt")
df <- createVariables(df, 0.1)
plotMotifsDistribution(df, c("AAT, AG"), count=TRUE)
source("R/plot.R")
plotMotifsDistribution(df, c("AAT, AG"), count=TRUE)
source("R/plot.R")
plotMotifsDistribution(df, c("AAT, AG"), count=TRUE)
source("R/classifySTR.R")
source("R/plot.R")
df <- readIntoDF("asd_data.txt")
df <- createVariables(df, 0.1)
plotMotifsDistribution(df, c("AAT, AG"), count=TRUE)
plotMotifsDistribution(df, c("AAT, AG"))
source("R/plot.R")
plotMotifsDistribution(df, c("AAT, AG"))
print(filteredDF)
filteredDF <- df[condition,]
head(filteredDF)
motifsList
for(motif in motifsList) {
condition <- condition | df$motif==motif
}
for(motif in motifsList) {
condition <- condition | df$motif==motif
}
condition
# Apply filter condition
filteredDF <- df[condition,]
head(filteredDF)
# Show count on the Y-axis
ggplot(filteredDF, aes(x=size, fill=motif), alpha=.75, bins=15) +
geom_vline(data=filteredDF, aes(xintercept=size.mean, colour=motif),
linetype="dashed", size=1) +
ggtitle("Motif Count Distribution Graph")
df$motif==motif
ggplot(filteredDF, aes(x=motif, fill=factor(variable))) +
geom_bar(position="stack") +
labs(title="Variable vs Stable STRs of Top " + toString(num) +
" Common Motifs",
x = "Count", y = "Motifs", fill="Variable\n")
motifsList <- c("GAAG", "AGAG")
typeof(motifsList)
condition <- FALSE
for(motif in motifsList) {
condition <- condition | DF$motif==motif
}
filteredDF <- DF[condition,]
ggplot(filteredDF, aes(x=size, fill=motif)) +
geom_histogram(aes(x=size), alpha=.75, bins=15) +
geom_vline(data=filteredDF, aes(xintercept=size.mean,  colour=motif),
linetype="dashed", size=1)
plotMotifsDistribution <- function(df, motifsList, count=TRUE) {
if(typeof(motifsList) != "character") {
stop("motif must be a character containing DNA bases: A, T, G, C")
}
if(!is.data.frame(df)) {
stop("df must be a data frame")
}
# Build filter condition
condition <- FALSE
for(motif in motifsList) {
condition <- condition | df$motif==motif
}
# Apply filter condition
filteredDF <- df[condition,]
head(filteredDF)
if(count) {
# Show count on the Y-axis
ggplot(filteredDF, aes(x=size, fill=motif), alpha=.75, bins=15) +
geom_vline(data=filteredDF, aes(xintercept=size.mean, colour=motif),
linetype="dashed", size=1) +
ggtitle("Motif Count Distribution Graph")
} else {
# Show density on the Y-axis
ggplot(filteredDF, aes(x=size, color=motif)) +
geom_density() +
geom_vline(data=filteredDF, aes(xintercept=size.mean, colour=motif),
linetype="dashed", size=1) +
ggtitle("Motif Density Distribution Graph")
}
}
plotMotifsDistribution(df, c("AAT, AG"))
plotMotifsDistribution(df, c("AGAG, AAT"))
plotMotifsDistribution(df, c("TATA, AAT"))
head(filteredDF)
plotMotifsDistribution(df, c("TATA, AAT"))
head(filteredDF)
typeof(c("TATA, AAT"))
plotMotifsDistribution(df, c("TATA", "AAT"))
plotMotifsDistribution(df, c("GAAG", "AGAG"))
plotMotifsDistribution(df, c("AT", "AGAG"))
plotMotifsDistribution(df, c("AT", "TA"))
df <- readIntoDF("asd_data.txt")
df <- createVariables(df, 0.1)
plotMotifsDistribution(df, c("AT", "TA"))
plotMotifsDistribution(df, c("GAAG", "AGAG"))
plotMotifsDistribution(df, c("GAAG", "AGAG"))
ggplot(filteredDF, aes(x=size, fill=motif)) +
geom_histogram(aes(x=size), alpha=.75, bins=15) +
geom_vline(data=filteredDF, aes(xintercept=size.mean,  color=motif),
linetype="dashed", size=1)
plotMotifsDistribution(df, c("GAAG", "AGAG"))
source("R/classifySTR.R")
plotMotifsDistribution(df, c("GAAG", "AGAG"))
source("R/classifySTR.R")
source("R/plot.R")
df <- readIntoDF("asd_data.txt")
df <- createVariables(df, 0.1)
plotMotifsDistribution(df, c("GAAG", "AGAG"))
plotMotifsDistribution(df, c("ATAT", "AG"))
plotMotifsDistribution(df, c("ATAT", "AG"), count=FALSE)
ggplot(filteredDF, aes(x=size, color=motif)) +
geom_density() +
geom_vline(data=filteredDF, aes(xintercept=size.mean,  color=motif),
linetype="dashed", size=1)
ggplot(filteredDF, aes(x=size, color=motif)) +
geom_density() +
geom_vline(data=filteredDF, aes(xintercept=size.mean, color=motif),
linetype="dashed", size=1) +
ggtitle("Motif Density Distribution Graph")
plotMotifsDistribution(df, c("ATAT", "AG"), count=FALSE)
plotTopNCommonMotifs(df, 5)
plotTopNCommonMotifs(df, 5)
source('~/workspace/STRExpansionAnalyzer/R/test.R')
typeof(5)
plotTopNCommonMotifs(df, 5)
source("R/plot.R")
plotTopNCommonMotifs(df, 5)
source("R/plot.R")
plotTopNCommonMotifs(df, 5)
plotTopNCommonMotifs(df, 5)
source("R/plot.R")
plotTopNCommonMotifs(df, 5)
plotTopNCommonMotifs(df, 5)
source("R/plot.R")
plotTopNCommonMotifs(df, 5)
plotTopNCommonMotifs(df, 4, stacked=TRUE)
source("R/plot.R")
plotTopNCommonMotifs(df, 4, stacked=TRUE)
source("R/plot.R")
plotTopNCommonMotifs(df, 4, stacked=TRUE)
plotTopNCommonMotifs(df, 4, stacked=FALSE)
plotTopNLeastVariableMotifs(df, 4)
source("R/plot.R")
plotTopNLeastVariableMotifs(df, 4)
plotTopNMostVariableMotifs(df, 4)
?read_file
citation(ggplot2)
citation("ggplot2")
?R
R.version()
R.version.string
devtools::build_vignettes()
devtools::build_vignettes()
.Last.error.trace
devtools::build_vignettes()
.Last.error.trace
install.packages("roxygen2")
devtools::document()
devtools::create("STRExpansionAnalyzer")
devtools::document()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::document().
devtools::document()
loadAll()
load_all()
rm(list = c("createVariables", "plotMotifsDistribution", "plotTopNCommonMotifs", "plotTopNLeastVariableMotifs", "plotTopNMostVariableMotifs", "readIntoDF"))
load_all()
devtools::document()
install_github("michaelzwong/STRExpansionAnalyzer", build_vignettes = TRUE)
library("STRExpansionAnalyzer")
require("devtools")
install_github("michaelzwong/STRExpansionAnalyzer", build_vignettes = TRUE)
STRExpansionAnalyzer::readIntoDF("STRExpansionAnalyzer/inst/str_data.txt")
STRExpansionAnalyzer::readIntoDF("inst/str_data.txt")
save(df)
save(df, file="short_tandem_repeats_loci.rda")
df <- load(file="short_tandem_repeats_loci.rda")
df <- load(file="data/short_tandem_repeats_loci.rda")
head(df)
df <- STRExpansionAnalyzer::readIntoDF("inst/str_data.txt")
save(df, file="data/short_tandem_repeats_loci.rda")
typeof(df)
head(df)
head(df)
save(df, file="data/short_tandem_repeats_loci.rda")
df <- load(file="data/short_tandem_repeats_loci.rda")
saveRDS(df, file="data/short_tandem_repeats_loci.rda")
df <- STRExpansionAnalyzer::readIntoDF("inst/str_data.txt")
saveRDS(df, file="data/short_tandem_repeats_loci.rda")
df <- load(file="data/short_tandem_repeats_loci.rda")
load("~/workspace/STRExpansionAnalyzer/data/short_tandem_repeats_loci.rda")
df <- load(df)
df <- load(short_tandem_repeats_loci)
data()
save(df, file="data/ShortTandemRepeatsLoci.rda")
df <- data("ShortTandemRepeatsLoci")
head(df)
df <- data(ShortTandemRepeatsLoci)
head(df)
load("~/workspace/STRExpansionAnalyzer/data/ShortTandemRepeatsLoci.rda")
df <- data(list=ShortTandemRepeatsLoci)
data(ShortTandemRepeatsLoci)
head(ShortTandemRepeatsLoci)
data(ShortTandemRepeatsLoci)
data("ShortTandemRepeatsLoci")
head(ShortTandemRepeatsLoci)
ShortTandemRepeatsLoci
head(df)
devtools::document().
devtools::document().
devtools::document()
devtools::document()
load("data/ShortTandemRepeatsLoci.rda")
ShortTandemRepeatsLoci
head(df)
save(df, file="data/ShortTandemRepeatsLoci.rda")
load("data/ShortTandemRepeatsLoci.rda")
ab <- load("data/ShortTandemRepeatsLoci.rda")
head(ab)
df <- STRExpansionAnalyzer::readIntoDF("inst/str_data.txt")
head(df)
chr
head(ShortTandemRepeatsLoci)
load("data/ShortTandemRepeatsLoci.rda")
chr <- df$chr
start <- df$start
end <- df$end
motif <- df$motif
save(chr, start, end, motif, file="data/ShortTandemRepeatsLoci.rda")
load("data/ShortTandemRepeatsLoci.rda")
rm(chr, start, end motif)
rm(chr, start, end, motif)
load("data/ShortTandemRepeatsLoci.rda")
df <- STRExpansionAnalyzer::readIntoDF("inst/str_data.txt")
save(df, file="data/ShortTandemRepeatsLoci2.rda")
clear(df)
rm(chr, start, end,motif)
rm(chr, start, end,motif, df)
load("data/ShortTandemRepeatsLoci2.rda")
ShortTandemRepeatsLoci <- STRExpansionAnalyzer::readIntoDF("inst/str_data.txt")
save(ShortTandemRepeatsLoci, file="data/ShortTandemRepeatsLoci.rda")
STRExpansionAnalyzer::createVariables(df, 0.1)
df <- createVariables(df, 0.1)
library("STRExpansionAnalyzer")
install_github("michaelzwong/STRExpansionAnalyzer", build_vignettes = TRUE)
library("STRExpansionAnalyzer")
ShortTandemRepeatsLoci <- STRExpansionAnalyzer::readIntoDF("inst/str_data.txt")
load(ShortTandemRepeatsLoci)
datasets
datasets()
data()
load(ShortTandemRepeatsLoci)
data("ShortTandemRepeatsLoci")
STRExpansionAnalyzer::createVariables(ShortTandemRepeatsLoci, 0.1)
View(ShortTandemRepeatsLoci)
remove.packages(STRExpansionAnalyzer)
remove.packages("STRExpansionAnalyzer")
require("devtools")
install_github("michaelzwong/STRExpansionAnalyzer", build_vignettes = TRUE)
library("STRExpansionAnalyzer")
ShortTandemRepeatsLoci <- STRExpansionAnalyzer::readIntoDF("inst/str_data.txt")
data("ShortTandemRepeatsLoci")
df <- createVariables(df, 0.1)
df <- STRExpansionAnalyzer::createVariables(df, 0.1)
library(STRExpansionAnalyzer)
data("ShortTandemRepeatsLoci")
STRExpansionAnalyzer::createVariables(ShortTandemRepeatsLoci, 0.2)
